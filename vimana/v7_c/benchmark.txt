BENCHMARK RESULTS
=================

Using -O3 with cc:
cc vimana.c -o vimana -O3 

Test 210705:

miki@mikis-Air v7_c % time ./vimana benchmark.vimana
./vimana benchmark.vimana  14.42s user 0.01s system 96% cpu 14.924 total
After local functions (possibly a little slower):
./vimana benchmark.vimana  14.56s user 0.02s system 99% cpu 14.696 total
./vimana benchmark.vimana  14.41s user 0.03s system 98% cpu 14.719 total

Test 210706:

miki@mikis-Air v7_c % time ./vimana benchmark.vimana 
./vimana benchmark.vimana  14.17s user 0.01s system 99% cpu 14.186 total
./vimana benchmark.vimana  14.11s user 0.01s system 85% cpu 16.539 total
WITHOUT OPTIMIZE_PRIMFUNS:
./vimana benchmark.vimana  15.54s user 0.01s system 85% cpu 18.132 total

Testing GC 210706:

WITHOUT REFERENCE COUNTING:
./vimana benchmark.vimana  14.57s user 0.01s system 98% cpu 14.805 total
./vimana benchmark.vimana  13.66s user 0.01s system 96% cpu 14.188 total (cold machine)
WITH REFERENCE COUNTING:
./vimana benchmark.vimana  16.44s user 0.01s system 98% cpu 16.738 total
WITH MACROS FOR REFERENCE COUNTING:
./vimana benchmark.vimana  14.79s user 0.01s system 97% cpu 15.234 total

Interpreter loop tests 210712:

With empty if-statement in exit stackframe
./vimana benchmark.vimana  14.75s user 0.01s system 97% cpu 15.192 total
Without the if-statement:
./vimana benchmark.vimana  14.16s user 0.01s system 98% cpu 14.424 total

Tests with 5000000 loops 20 fact:

USE_ORIGINAL_LOOP_WITH_SOME_GOTOS:
WITH ONE goto DoNextInstr:
./vimana benchmark.vimana  7.23s user 0.01s system 94% cpu 7.641 total
./vimana benchmark.vimana  7.18s user 0.01s system 99% cpu 7.203 total
./vimana benchmark.vimana  6.98s user 0.01s system 94% cpu 7.406 total (High FAN)
./vimana benchmark.vimana  7.06s user 0.01s system 99% cpu 7.068 total (High FAN)
WITH TWO goto DoNextInstr:
./vimana benchmark.vimana  7.90s user 0.01s system 94% cpu 8.326 total
./vimana benchmark.vimana  8.20s user 0.01s system 93% cpu 8.769 total (High FAN)
./vimana benchmark.vimana  8.19s user 0.01s system 99% cpu 8.213 total (High FAN)
./vimana benchmark.vimana  8.14s user 0.01s system 95% cpu 8.541 total (High FAN)
WITHOUT goto DoNextInstr (but many goto DoExit):
./vimana benchmark.vimana  7.21s user 0.01s system 92% cpu 7.813 total
./vimana benchmark.vimana  7.44s user 0.01s system 99% cpu 7.454 total
./vimana benchmark.vimana  7.66s user 0.01s system 99% cpu 7.689 total
./vimana benchmark.vimana  6.80s user 0.01s system 75% cpu 9.014 total (High FAN)
./vimana benchmark.vimana  6.75s user 0.01s system 99% cpu 6.766 total (High FAN)
./vimana benchmark.vimana  6.78s user 0.01s system 94% cpu 7.177 total (High FAN)

Looks like certain use of goto ruins performance!

USE_NO_GOTOS_IN_LOOP:
./vimana benchmark.vimana  8.00s user 0.01s system 99% cpu 8.019 total
./vimana benchmark.vimana  8.47s user 0.01s system 99% cpu 8.495 total (Low FAN)
./vimana benchmark.vimana  7.55s user 0.01s system 99% cpu 7.573 total (High FAN)
./vimana benchmark.vimana  7.23s user 0.01s system 99% cpu 7.248 total (High FAN)
Changed order in loop - exit stackframe in else clause:
./vimana benchmark.vimana  6.96s user 0.01s system 92% cpu 7.527 total (High FAN)
./vimana benchmark.vimana  7.08s user 0.01s system 99% cpu 7.099 total (High FAN)
./vimana benchmark.vimana  6.82s user 0.01s system 99% cpu 6.847 total (High FAN)
With check for currentContext->releaseEnv, surprisigly fast (committing this version):
./vimana benchmark.vimana  6.77s user 0.01s system 94% cpu 7.204 total (High FAN)
./vimana benchmark.vimana  6.76s user 0.01s system 99% cpu 6.776 total (High FAN)

USE_COMPUTED_GOTOS:
./vimana benchmark.vimana  7.79s user 0.01s system 87% cpu 8.925 total (High FAN)
./vimana benchmark.vimana  7.84s user 0.01s system 99% cpu 7.854 total (High FAN)
./vimana benchmark.vimana  7.95s user 0.01s system 99% cpu 7.965 total (High FAN)

Testing memory allocation 210712:

NO GC:
miki@mikis-Air v7_c % ./vimana test.vimana
MemAlloc: 189 MemFree: 165
WITH GC:
miki@mikis-Air v7_c % ./vimana test.vimana
MemAlloc: 213 MemFree: 189
