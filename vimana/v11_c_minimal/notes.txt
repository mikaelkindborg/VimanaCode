
/*

InterpRun -> InterpEval
- do not free code list automatically

InterpCallFun(VInterp* interp, VIndex symbolId)
- Use predefined symbols, like loop (like primfuns)

Schedule(VScheduler* scheduler, VInterp* interp)

InterpEval(VInterp* interp, VList* code)

InterpEvalPrepare/Setup(VInterp* interp, VList* code)
InterpEvalSlice(VInterp* interp, VNumber numSteps)
InterpClearStack(VInterp* interp)

Primfun: millis suspend

*/

/*
Alternative representations for VItem
-------------------------------------

Currently a pointer-sized VItem is used (16 bits on Arduino and 64 bits on macOS)

Alternatively, use long on Arduino (32 bits) instead of int/pointer (16 bits)
- Can hold 31 bit integers (one type bit is used for tagging integers)
- Can hold 16-bit pointers
- Structs need not be 16 bit aligned
- Can hold pointers to primitive functions (table with function pointers take up heap space, but the table should be possible to do as code)
- Can not hold floats
- Takes up more space (x2)

As a variation of the above, use two fields (pointer, value): 
- 32 bits on Ardino, 128 bits on 64 bit machines
- Can hold 16-bit pointers (Arduino)
- Structs need not be 16 bit aligned (Arduino)
- The pointer field can be a function pointer for interpreter dispatch of operations on item types and for primitive functions (this means zero branching in the main interpreter loop)
- Can not hold floats
- On Arduino, only 16 bit integers can be used without branching on the int type bit
- Takes up more space (x2)

Using sequences of items of varying size is another possibility, but this breaks the principle of arrays of code that can be manipulated as data (lists).

Test on Arduino Uno 210922
--------------------------

This is with 16 bit VItem

The Vimana code computes 32 fib 5 times

12:38:17.140 -> BEGIN
12:38:18.142 -> sizeof(VItem)2
12:38:18.142 -> sizeof(VList)8
12:38:18.179 -> sizeof(VContext)4
12:38:18.179 -> sizeof(VInterp)12
12:38:18.213 -> sizeof(VObj)2
12:38:18.213 -> sizeof(void*)2
12:38:18.249 -> sizeof(int)2
12:38:18.249 -> sizeof(long)4
12:38:18.283 -> sizeof(double)4
12:38:18.283 -> sizeof(float)4
12:38:18.283 -> 1596 (free RAM before parsing symbolic code)
12:38:18.321 -> (L(S0) L(P17 2 P8 L(P17 1 P4 S0 P20 2 P4 S0 P3) P13) P2 L(S1) L(P17 P10 L(P16 P16) L(P20 P17 P11 P20 1 P4 S1) P14) P2 L(18 S0 P0) 5 S1)
12:38:18.462 -> 1294 (free RAM after parsing symbolic code)
12:38:21.605 -> 2584 (18 fib)
12:38:24.856 -> 2584 (18 fib)
12:38:28.075 -> 2584 (18 fib)
12:38:31.332 -> 2584 (18 fib)
12:38:34.558 -> 2584 (18 fib)
12:38:34.558 -> 946 (free RAM after exit of InterpRun)
12:38:34.558 -> 1596 (free RAM after InterpFree)
*/
