
(funify swap setglobal) funify 
  (def) setglobal

1
(
  (times) 
    (dup iszero 
      (drop drop) 
      (swap dup eval swap 1- times) 
    ifelse) def
    
  (fib)
    (dup 2 < (dup 1- fib swap 2- fib +) iffalse) def

  (32 fib print) 5 times
) 
(
  (times) (N! L!
    N 0 >
      (L eval  L N 1- times) 
    iftrue) def

  (fib) (N!
    N 2 < (N) (N 1- fib N 2- fib +) ifelse) def

  (32 fib print) 5 times
) 
ifelse

/-------------------

42 N!
N print

(foo) (L! N! N 1 > (L eval N 1- L foo sayHi) iftrue) def
5 (N print) foo

(foo) (L! N! N 1 > (L eval) iftrue) def
10 (N print N 1- L foo) foo

(times) (N! L! 
  N print
  N 0 > 
    ('foo' print L eval 'foo2' print L N 1- times) 
  iftrue) def

(N! print) 5 times

---/


/---
(times) (N! L! 
  N print
  N 0 >  
    (L eval  L N 1- times) 
  iftrue) def

(fib) (N!
  N 1 > (N 1- fib N 2- fib +) iftrue) def

(32 fib print) 5 times

(times) 
  (dup iszero 
    (drop drop) 
    (swap dup eval swap 1- times) 
  ifelse) def

(fib)
  (dup 1 > (dup 1- fib swap 2- fib +) iftrue) def

(32 fib print) 5 times

0 (counter) setglobal

counter print

(
  'Hi World' print

  (iffalse)
    (swap not swap iftrue) def

  (Xfib)
    (dup 2 < not (dup 1 - fib swap 2 - fib +) iftrue) def

  (iffalse2)
    (swap not swap iftrue) def
) 
drop


(


(fib) (
  1 localset
  @1 2 < (@1 1- fib 2- fib +) iffalse) def


(times) (
  2 localset
  @2 0 >  
    (@1 eval  @1 @2 1- times) 
  ifelse) def

(code n times)
  (n 0 >  
    (code call  code n 1- times) 
  ifelse) def

(n fib) (
  n 2 < (n 1- fib 2- fib +) iffalse) def

eval funcall apply
eval call


(() 32 fib print) fun 5 times


(head body def)
  (head length > 1 ()))
  
(butlast) (L!
  L length > 1 (L first L rest butlast cons) (nil) ifelse)

---/
