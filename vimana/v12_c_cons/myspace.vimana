/--
sayHi

(foo) ([A] A print) def

(foo) ([A] A 0 > (A print A 1- foo) iftrue) def

10 foo
--/

/--
(1) (1) eq print

'---------' print

() first print
() rest print

'---------' print

(1) first print
(1) rest print
(1 2) rest print

'---------' print

1 (2 3) cons dup print rest print

(isempty) (() eq) def

'---------' print

() isempty print
(1 2) rest isempty print

'---------' print

(printlist)
  ([A] A isempty not (A first print A rest printlist) iftrue) def

(1 2 3) printlist

'---------' print
--/

(isempty) (() eq) def

(makelist) 
  ([A] A 1 < (()) (A A 1- makelist cons) ifelse) def

10 makelist 10 makelist 10 makelist cons cons 
drop
printstack
gc

10 makelist 
printstack
drop
gc

/--dup print 
first print--/
